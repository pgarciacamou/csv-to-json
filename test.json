[{"ref: refs/heads/master":"[core]"},{"ref: refs/heads/master":"repositoryformatversion = 0"},{"ref: refs/heads/master":"filemode = true"},{"ref: refs/heads/master":"bare = false"},{"ref: refs/heads/master":"logallrefupdates = true"},{"ref: refs/heads/master":"ignorecase = true"},{"ref: refs/heads/master":"precomposeunicode = true"},{"ref: refs/heads/master":"[remote \"origin\"]"},{"ref: refs/heads/master":"url = https://github.com/pgarciacamou/csv-to-json.git"},{"ref: refs/heads/master":"fetch = +refs/heads/*:refs/remotes/origin/*"},{"ref: refs/heads/master":"[branch \"master\"]"},{"ref: refs/heads/master":"remote = origin"},{"ref: refs/heads/master":"merge = refs/heads/master"},{"ref: refs/heads/master":"Unnamed repository; edit this file 'description' to name the repository."},{"ref: refs/heads/master":"#!/bin/sh"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# An example hook script to check the commit log message taken by"},{"ref: refs/heads/master":"# applypatch from an e-mail message."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# The hook should exit with non-zero status after issuing an"},{"ref: refs/heads/master":"# appropriate message if it wants to stop the commit.  The hook is"},{"ref: refs/heads/master":"# allowed to edit the commit message file."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# To enable this hook"},{"ref: refs/heads/master":". git-sh-setup"},{"ref: refs/heads/master":"test -x \"$GIT_DIR/hooks/commit-msg\" &&"},{"ref: refs/heads/master":"exec \"$GIT_DIR/hooks/commit-msg\" ${1+\"$@\"}"},{"ref: refs/heads/master":":"},{"ref: refs/heads/master":"#!/bin/sh"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# An example hook script to check the commit log message."},{"ref: refs/heads/master":"# Called by \"git commit\" with one argument"},{"ref: refs/heads/master":"# that has the commit message.  The hook should exit with non-zero"},{"ref: refs/heads/master":"# status after issuing an appropriate message if it wants to stop the"},{"ref: refs/heads/master":"# commit.  The hook is allowed to edit the commit message file."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# To enable this hook"},{"ref: refs/heads/master":"# Uncomment the below to add a Signed-off-by line to the message."},{"ref: refs/heads/master":"# Doing this in a hook is a bad idea in general"},{"ref: refs/heads/master":"# hook is more suited to it."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')"},{"ref: refs/heads/master":"# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\""},{"ref: refs/heads/master":"# This example catches duplicate Signed-off-by lines."},{"ref: refs/heads/master":"test \" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {"},{"ref: refs/heads/master":"echo >&2 Duplicate Signed-off-by lines."},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"#!/bin/sh"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# An example hook script to prepare a packed repository for use over"},{"ref: refs/heads/master":"# dumb transports."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# To enable this hook"},{"ref: refs/heads/master":"exec git update-server-info"},{"ref: refs/heads/master":"#!/bin/sh"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# An example hook script to verify what is about to be committed"},{"ref: refs/heads/master":"# by applypatch from an e-mail message."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# The hook should exit with non-zero status after issuing an"},{"ref: refs/heads/master":"# appropriate message if it wants to stop the commit."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# To enable this hook"},{"ref: refs/heads/master":". git-sh-setup"},{"ref: refs/heads/master":"test -x \"$GIT_DIR/hooks/pre-commit\" &&"},{"ref: refs/heads/master":"exec \"$GIT_DIR/hooks/pre-commit\" ${1+\"$@\"}"},{"ref: refs/heads/master":":"},{"ref: refs/heads/master":"#!/bin/sh"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# An example hook script to verify what is about to be committed."},{"ref: refs/heads/master":"# Called by \"git commit\" with no arguments.  The hook should"},{"ref: refs/heads/master":"# exit with non-zero status after issuing an appropriate message if"},{"ref: refs/heads/master":"# it wants to stop the commit."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# To enable this hook"},{"ref: refs/heads/master":"if git rev-parse --verify HEAD >/dev/null 2>&1"},{"ref: refs/heads/master":"then"},{"ref: refs/heads/master":"against=HEAD"},{"ref: refs/heads/master":"else"},{"ref: refs/heads/master":"# Initial commit: diff against an empty tree object"},{"ref: refs/heads/master":"against=4b825dc642cb6eb9a060e54bf8d69288fbee4904"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":"# If you want to allow non-ASCII filenames set this variable to true."},{"ref: refs/heads/master":"allownonascii=$(git config --bool hooks.allownonascii)"},{"ref: refs/heads/master":"# Redirect output to stderr."},{"ref: refs/heads/master":"exec 1>&2"},{"ref: refs/heads/master":"# Cross platform projects tend to avoid non-ASCII filenames; prevent"},{"ref: refs/heads/master":"# them from being added to the repository. We exploit the fact that the"},{"ref: refs/heads/master":"# printable range starts at the space character and ends with tilde."},{"ref: refs/heads/master":"if [ \"$allownonascii\" != \"true\" ] &&"},{"ref: refs/heads/master":"# Note that the use of brackets around a tr range is ok here"},{"ref: refs/heads/master":"# even required"},{"ref: refs/heads/master":"# the square bracket bytes happen to fall in the designated range."},{"ref: refs/heads/master":"test $(git diff --cached --name-only --diff-filter=A -z $against |"},{"ref: refs/heads/master":"LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0"},{"ref: refs/heads/master":"then"},{"ref: refs/heads/master":"cat <<\\EOF"},{"ref: refs/heads/master":"Error: Attempt to add a non-ASCII file name."},{"ref: refs/heads/master":"This can cause problems if you want to work with people on other platforms."},{"ref: refs/heads/master":"To be portable it is advisable to rename the file."},{"ref: refs/heads/master":"If you know what you are doing you can disable this check using:"},{"ref: refs/heads/master":"git config hooks.allownonascii true"},{"ref: refs/heads/master":"EOF"},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":"# If there are whitespace errors"},{"ref: refs/heads/master":"exec git diff-index --check --cached $against --"},{"ref: refs/heads/master":"#!/bin/sh"},{"ref: refs/heads/master":"# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status"},{"ref: refs/heads/master":"# pushed.  If this script exits with a non-zero status nothing will be pushed."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# This hook is called with the following parameters:"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# $1 -- Name of the remote to which the push is being done"},{"ref: refs/heads/master":"# $2 -- URL to which the push is being done"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# If pushing without using a named remote those arguments will be equal."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# Information about the commits which are being pushed is supplied as lines to"},{"ref: refs/heads/master":"# the standard input in the form:"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"#   <local ref> <local sha1> <remote ref> <remote sha1>"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# This sample shows how to prevent push of commits where the log message starts"},{"ref: refs/heads/master":"# with \"WIP\" (work in progress)."},{"ref: refs/heads/master":"remote=\"$1\""},{"ref: refs/heads/master":"url=\"$2\""},{"ref: refs/heads/master":"z40=0000000000000000000000000000000000000000"},{"ref: refs/heads/master":"IFS=' '"},{"ref: refs/heads/master":"while read local_ref local_sha remote_ref remote_sha"},{"ref: refs/heads/master":"do"},{"ref: refs/heads/master":"if [ \"$local_sha\" = $z40 ]"},{"ref: refs/heads/master":"then"},{"ref: refs/heads/master":"# Handle delete"},{"ref: refs/heads/master":":"},{"ref: refs/heads/master":"else"},{"ref: refs/heads/master":"if [ \"$remote_sha\" = $z40 ]"},{"ref: refs/heads/master":"then"},{"ref: refs/heads/master":"# New branch"},{"ref: refs/heads/master":"range=\"$local_sha\""},{"ref: refs/heads/master":"else"},{"ref: refs/heads/master":"# Update to existing branch"},{"ref: refs/heads/master":"range=\"$remote_sha..$local_sha\""},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":"# Check for WIP commit"},{"ref: refs/heads/master":"commit=`git rev-list -n 1 --grep '^WIP' \"$range\"`"},{"ref: refs/heads/master":"if [ -n \"$commit\" ]"},{"ref: refs/heads/master":"then"},{"ref: refs/heads/master":"echo \"Found WIP commit in $local_ref, not pushing"},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":"done"},{"ref: refs/heads/master":"exit 0"},{"ref: refs/heads/master":"#!/bin/sh"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# Copyright (c) 2006"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# The \"pre-rebase\" hook is run just before \"git rebase\" starts doing"},{"ref: refs/heads/master":"# its job"},{"ref: refs/heads/master":"# non-zero status."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# The hook is called with the following parameters:"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# $1 -- the upstream the series was forked from."},{"ref: refs/heads/master":"# $2 -- the branch being rebased (or empty when rebasing the current branch)."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# This sample shows how to prevent topic branches that are already"},{"ref: refs/heads/master":"# merged to 'next' branch from getting rebased"},{"ref: refs/heads/master":"# would result in rebasing already published history."},{"ref: refs/heads/master":"publish=next"},{"ref: refs/heads/master":"basebranch=\"$1\""},{"ref: refs/heads/master":"if test \"$#\" = 2"},{"ref: refs/heads/master":"then"},{"ref: refs/heads/master":"topic=\"refs/heads/$2\""},{"ref: refs/heads/master":"else"},{"ref: refs/heads/master":"topic=`git symbolic-ref HEAD` ||"},{"ref: refs/heads/master":"exit 0 ;# we do not interrupt rebasing detached HEAD"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":"case \"$topic\" in"},{"ref: refs/heads/master":"refs/heads/??/*)"},{"ref: refs/heads/master":";;"},{"ref: refs/heads/master":"*)"},{"ref: refs/heads/master":"exit 0 ;# we do not interrupt others."},{"ref: refs/heads/master":";;"},{"ref: refs/heads/master":"esac"},{"ref: refs/heads/master":"# Now we are dealing with a topic branch being rebased"},{"ref: refs/heads/master":"# on top of master.  Is it OK to rebase it?"},{"ref: refs/heads/master":"# Does the topic really exist?"},{"ref: refs/heads/master":"git show-ref -q \"$topic\" || {"},{"ref: refs/heads/master":"echo >&2 \"No such branch $topic\""},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"# Is topic fully merged to master?"},{"ref: refs/heads/master":"not_in_master=`git rev-list --pretty=oneline ^master \"$topic\"`"},{"ref: refs/heads/master":"if test -z \"$not_in_master\""},{"ref: refs/heads/master":"then"},{"ref: refs/heads/master":"echo >&2 \"$topic is fully merged to master; better remove it.\""},{"ref: refs/heads/master":"exit 1 ;# we could allow it"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":"# Is topic ever merged to next?  If so you should not be rebasing it."},{"ref: refs/heads/master":"only_next_1=`git rev-list ^master \"^$topic\" ${publish} | sort`"},{"ref: refs/heads/master":"only_next_2=`git rev-list ^master           ${publish} | sort`"},{"ref: refs/heads/master":"if test \"$only_next_1\" = \"$only_next_2\""},{"ref: refs/heads/master":"then"},{"ref: refs/heads/master":"not_in_topic=`git rev-list \"^$topic\" master`"},{"ref: refs/heads/master":"if test -z \"$not_in_topic\""},{"ref: refs/heads/master":"then"},{"ref: refs/heads/master":"echo >&2 \"$topic is already up-to-date with master\""},{"ref: refs/heads/master":"exit 1 ;# we could allow it"},{"ref: refs/heads/master":"else"},{"ref: refs/heads/master":"exit 0"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":"else"},{"ref: refs/heads/master":"not_in_next=`git rev-list --pretty=oneline ^${publish} \"$topic\"`"},{"ref: refs/heads/master":"/usr/bin/perl -e '"},{"ref: refs/heads/master":"my $topic = $ARGV[0];"},{"ref: refs/heads/master":"my $msg = \"* $topic has commits already merged to public branch:\\n\";"},{"ref: refs/heads/master":"my (%not_in_next) = map {"},{"ref: refs/heads/master":"/^([0-9a-f]+) /;"},{"ref: refs/heads/master":"($1 => 1);"},{"ref: refs/heads/master":"} split(/\\n/"},{"ref: refs/heads/master":"for my $elem (map {"},{"ref: refs/heads/master":"/^([0-9a-f]+) (.*)$/;"},{"ref: refs/heads/master":"[$1 => $2];"},{"ref: refs/heads/master":"} split(/\\n/"},{"ref: refs/heads/master":"if (!exists $not_in_next{$elem->[0]}) {"},{"ref: refs/heads/master":"if ($msg) {"},{"ref: refs/heads/master":"print STDERR $msg;"},{"ref: refs/heads/master":"undef $msg;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"print STDERR \" $elem->[1]\\n\";"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"' \"$topic\" \"$not_in_next\" \"$not_in_master\""},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":"exit 0"},{"ref: refs/heads/master":"################################################################"},{"ref: refs/heads/master":"This sample hook safeguards topic branches that have been"},{"ref: refs/heads/master":"published from being rewound."},{"ref: refs/heads/master":"The workflow assumed here is:"},{"ref: refs/heads/master":"* Once a topic branch forks from \"master\""},{"ref: refs/heads/master":"merged into it again (either directly or indirectly)."},{"ref: refs/heads/master":"* Once a topic branch is fully cooked and merged into \"master\""},{"ref: refs/heads/master":"it is deleted.  If you need to build on top of it to correct"},{"ref: refs/heads/master":"earlier mistakes"},{"ref: refs/heads/master":"the tip of the \"master\".  This is not strictly necessary"},{"ref: refs/heads/master":"it makes it easier to keep your history simple."},{"ref: refs/heads/master":"* Whenever you need to test or publish your changes to topic"},{"ref: refs/heads/master":"branches"},{"ref: refs/heads/master":"The script"},{"ref: refs/heads/master":"to be \"next\""},{"ref: refs/heads/master":"$GIT_DIR/config mechanism."},{"ref: refs/heads/master":"With this workflow"},{"ref: refs/heads/master":"(1) ... if a topic branch has ever been merged to \"next\".  Young"},{"ref: refs/heads/master":"topic branches can have stupid mistakes you would rather"},{"ref: refs/heads/master":"clean up before publishing"},{"ref: refs/heads/master":"merged into other branches can be easily rebased without"},{"ref: refs/heads/master":"affecting other people.  But once it is published"},{"ref: refs/heads/master":"not want to rewind it."},{"ref: refs/heads/master":"(2) ... if a topic branch has been fully merged to \"master\"."},{"ref: refs/heads/master":"Then you can delete it.  More importantly"},{"ref: refs/heads/master":"build on top of it -- other people may already want to"},{"ref: refs/heads/master":"change things related to the topic as patches against your"},{"ref: refs/heads/master":"master"},{"ref: refs/heads/master":"fork the topic (perhaps with the same name) afresh from the"},{"ref: refs/heads/master":"tip of \"master\"."},{"ref: refs/heads/master":"Let's look at this example:"},{"ref: refs/heads/master":"o---o---o---o---o---o---o---o---o---o \"next\""},{"ref: refs/heads/master":"/       /           /           /"},{"ref: refs/heads/master":"/   a---a---b A     /           /"},{"ref: refs/heads/master":"/   /               /           /"},{"ref: refs/heads/master":"/   /   c---c---c---c B         /"},{"ref: refs/heads/master":"/   /   /             \\         /"},{"ref: refs/heads/master":"/   /   /   b---b C     \\       /"},{"ref: refs/heads/master":"/   /   /   /             \\     /"},{"ref: refs/heads/master":"---o---o---o---o---o---o---o---o---o---o---o \"master\""},{"ref: refs/heads/master":"A"},{"ref: refs/heads/master":"* A has one fix since it was merged up to \"next\"."},{"ref: refs/heads/master":"* B has finished.  It has been fully merged up to \"master\" and \"next\""},{"ref: refs/heads/master":"and is ready to be deleted."},{"ref: refs/heads/master":"* C has not merged to \"next\" at all."},{"ref: refs/heads/master":"We would want to allow C to be rebased"},{"ref: refs/heads/master":"B to be deleted."},{"ref: refs/heads/master":"To compute (1):"},{"ref: refs/heads/master":"git rev-list ^master ^topic next"},{"ref: refs/heads/master":"git rev-list ^master        next"},{"ref: refs/heads/master":"if these match"},{"ref: refs/heads/master":"To compute (2):"},{"ref: refs/heads/master":"git rev-list master..topic"},{"ref: refs/heads/master":"if this is empty"},{"ref: refs/heads/master":"#!/bin/sh"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# An example hook script to prepare the commit log message."},{"ref: refs/heads/master":"# Called by \"git commit\" with the name of the file that has the"},{"ref: refs/heads/master":"# commit message"},{"ref: refs/heads/master":"# message's source.  The hook's purpose is to edit the commit"},{"ref: refs/heads/master":"# message file.  If the hook fails with a non-zero status"},{"ref: refs/heads/master":"# the commit is aborted."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# To enable this hook"},{"ref: refs/heads/master":"# This hook includes three examples.  The first comments out the"},{"ref: refs/heads/master":"# \"Conflicts:\" part of a merge commit."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# The second includes the output of \"git diff --name-status -r\""},{"ref: refs/heads/master":"# into the message"},{"ref: refs/heads/master":"# commented because it doesn't cope with --amend or with squashed"},{"ref: refs/heads/master":"# commits."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# The third example adds a Signed-off-by line to the message"},{"ref: refs/heads/master":"# still be edited.  This is rarely a good idea."},{"ref: refs/heads/master":"ase \"$2,$3\" i"},{"ref: refs/heads/master":"merge"},{"ref: refs/heads/master":"/usr/bin/perl -i.bak -ne 's/^/# /"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"#   /usr/bin/perl -i.bak -pe '"},{"ref: refs/heads/master":"#      print \"\\n\" . `git diff --cached --name-status -r`"},{"ref: refs/heads/master":"#\t if /^#/ && $first++ == 0' \"$1\" ;;"},{"ref: refs/heads/master":"*) ;;"},{"ref: refs/heads/master":"esac"},{"ref: refs/heads/master":"# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')"},{"ref: refs/heads/master":"# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\""},{"ref: refs/heads/master":"#!/bin/sh"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# An example hook script to blocks unannotated tags from entering."},{"ref: refs/heads/master":"# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# To enable this hook"},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# Config"},{"ref: refs/heads/master":"# ------"},{"ref: refs/heads/master":"# hooks.allowunannotated"},{"ref: refs/heads/master":"#   This boolean sets whether unannotated tags will be allowed into the"},{"ref: refs/heads/master":"#   repository.  By default they won't be."},{"ref: refs/heads/master":"# hooks.allowdeletetag"},{"ref: refs/heads/master":"#   This boolean sets whether deleting tags will be allowed in the"},{"ref: refs/heads/master":"#   repository.  By default they won't be."},{"ref: refs/heads/master":"# hooks.allowmodifytag"},{"ref: refs/heads/master":"#   This boolean sets whether a tag may be modified after creation. By default"},{"ref: refs/heads/master":"#   it won't be."},{"ref: refs/heads/master":"# hooks.allowdeletebranch"},{"ref: refs/heads/master":"#   This boolean sets whether deleting branches will be allowed in the"},{"ref: refs/heads/master":"#   repository.  By default they won't be."},{"ref: refs/heads/master":"# hooks.denycreatebranch"},{"ref: refs/heads/master":"#   This boolean sets whether remotely creating branches will be denied"},{"ref: refs/heads/master":"#   in the repository.  By default this is allowed."},{"ref: refs/heads/master":"#"},{"ref: refs/heads/master":"# --- Command line"},{"ref: refs/heads/master":"refname=\"$1\""},{"ref: refs/heads/master":"oldrev=\"$2\""},{"ref: refs/heads/master":"newrev=\"$3\""},{"ref: refs/heads/master":"# --- Safety check"},{"ref: refs/heads/master":"if [ -z \"$GIT_DIR\" ]; then"},{"ref: refs/heads/master":"echo \"Don't run this script from the command line.\" >&2"},{"ref: refs/heads/master":"echo \" (if you want, you could supply GIT_DIR then run\" >&"},{"ref: refs/heads/master":"echo \"  $0 <ref> <oldrev> <newrev>)\" >&2"},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":"if [ -z \"$refname\" -o -z \"$oldrev\" -o -z \"$newrev\" ]; then"},{"ref: refs/heads/master":"echo \"usage: $0 <ref> <oldrev> <newrev>\" >&2"},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":"# --- Config"},{"ref: refs/heads/master":"allowunannotated=$(git config --bool hooks.allowunannotated)"},{"ref: refs/heads/master":"allowdeletebranch=$(git config --bool hooks.allowdeletebranch)"},{"ref: refs/heads/master":"denycreatebranch=$(git config --bool hooks.denycreatebranch)"},{"ref: refs/heads/master":"allowdeletetag=$(git config --bool hooks.allowdeletetag)"},{"ref: refs/heads/master":"allowmodifytag=$(git config --bool hooks.allowmodifytag)"},{"ref: refs/heads/master":"# check for no description"},{"ref: refs/heads/master":"projectdesc=$(sed -e '1q' \"$GIT_DIR/description\")"},{"ref: refs/heads/master":"case \"$projectdesc\" in"},{"ref: refs/heads/master":"\"Unnamed repository\"* | \")"},{"ref: refs/heads/master":"echo \"*** Project description file hasn't been set\" >&2"},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":";;"},{"ref: refs/heads/master":"esac"},{"ref: refs/heads/master":"# --- Check types"},{"ref: refs/heads/master":"# if $newrev is 0000...0000"},{"ref: refs/heads/master":"zero=\"0000000000000000000000000000000000000000\""},{"ref: refs/heads/master":"if [ \"$newrev\" = \"$zero\" ]; then"},{"ref: refs/heads/master":"newrev_type=delete"},{"ref: refs/heads/master":"else"},{"ref: refs/heads/master":"newrev_type=$(git cat-file -t $newrev)"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":"case \"$refname\""},{"ref: refs/heads/master":"refs/tags/*"},{"ref: refs/heads/master":"# un-annotated tag"},{"ref: refs/heads/master":"short_refname=${refname##refs/tags/}"},{"ref: refs/heads/master":"if [ \"$allowunannotated\" != \"true\" ]; then"},{"ref: refs/heads/master":"echo \"*** The un-annotated tag, $short_refname, is not allowed in this repository\" >&"},{"ref: refs/heads/master":"echo \"*** Use 'git tag [ -a | -s ]' for tags you want to propagate.\" >&2"},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":";;"},{"ref: refs/heads/master":"refs/tags/*"},{"ref: refs/heads/master":"# delete tag"},{"ref: refs/heads/master":"if [ \"$allowdeletetag\" != \"true\" ]; then"},{"ref: refs/heads/master":"echo \"*** Deleting a tag is not allowed in this repository\" >&2"},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":";;"},{"ref: refs/heads/master":"refs/tags/*"},{"ref: refs/heads/master":"# annotated tag"},{"ref: refs/heads/master":"if [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1"},{"ref: refs/heads/master":"then"},{"ref: refs/heads/master":"echo \"*** Tag '$refname' already exists.\" >&2"},{"ref: refs/heads/master":"echo \"*** Modifying a tag is not allowed in this repository.\" >&2"},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":";;"},{"ref: refs/heads/master":"refs/heads/*"},{"ref: refs/heads/master":"# branch"},{"ref: refs/heads/master":"if [ \"$oldrev\" = \"$zero\" -a \"$denycreatebranch\" = \"true\" ]; then"},{"ref: refs/heads/master":"echo \"*** Creating a branch is not allowed in this repository\" >&2"},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":";;"},{"ref: refs/heads/master":"refs/heads/*"},{"ref: refs/heads/master":"# delete branch"},{"ref: refs/heads/master":"if [ \"$allowdeletebranch\" != \"true\" ]; then"},{"ref: refs/heads/master":"echo \"*** Deleting a branch is not allowed in this repository\" >&2"},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":";;"},{"ref: refs/heads/master":"refs/remotes/*"},{"ref: refs/heads/master":"# tracking branch"},{"ref: refs/heads/master":";;"},{"ref: refs/heads/master":"refs/remotes/*"},{"ref: refs/heads/master":"# delete tracking branch"},{"ref: refs/heads/master":"if [ \"$allowdeletebranch\" != \"true\" ]; then"},{"ref: refs/heads/master":"echo \"*** Deleting a tracking branch is not allowed in this repository\" >&2"},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":"fi"},{"ref: refs/heads/master":";;"},{"ref: refs/heads/master":"*)"},{"ref: refs/heads/master":"# Anything else (is there anything else?)"},{"ref: refs/heads/master":"echo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2"},{"ref: refs/heads/master":"exit 1"},{"ref: refs/heads/master":";;"},{"ref: refs/heads/master":"esac"},{"ref: refs/heads/master":"# --- Finished"},{"ref: refs/heads/master":"exit 0"},{"ref: refs/heads/master":"DIRC\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0007U\u0019��\u0000\u0000\u0000\u0000U\u0019��\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000(��\u0000\u0000��\u0000\u0000\u0001�\u0000\u0000\u0000\u0014\u0000\u0000\u0000\r@�x�[\u001c��w\u0004�7�\u001b��I���\u0000"},{"ref: refs/heads/master":".gitignore\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000U\u0019��\u0000\u0000\u0000\u0000U\u0019��\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000(��\u0000\u0000��\u0000\u0000\u0001�\u0000\u0000\u0000\u0014\u0000\u0000\u00048�=[Ó\u0001xCWg+�A\u0019\u001d�-�T\u0000\u0007LICENSE\u0000\u0000\u0000U\u0019��\u0000\u0000\u0000\u0000U\u0019��\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000(��\u0000\u0000��\u0000\u0000\u0001�\u0000\u0000\u0000\u0014\u0000\u0000\u0000/d�V��\u0003U)1�����8"},{"ref: refs/heads/master":"# Lines that start with '#' are comments."},{"ref: refs/heads/master":"# For a project mostly in C"},{"ref: refs/heads/master":"# exclude patterns (uncomment them if you want to use them):"},{"ref: refs/heads/master":"# *.[oa]"},{"ref: refs/heads/master":"# *~"},{"ref: refs/heads/master":"0000000000000000000000000000000000000000 3ddfce49a0f3af7abaad8086a7b2224e706b1d4d Angelo Scandaliato <angelo@Angelos-MacBook-Pro.local> 1427743127 -0700\tclone: from https://github.com/pgarciacamou/csv-to-json.git"},{"ref: refs/heads/master":"0000000000000000000000000000000000000000 3ddfce49a0f3af7abaad8086a7b2224e706b1d4d Angelo Scandaliato <angelo@Angelos-MacBook-Pro.local> 1427743127 -0700\tclone: from https://github.com/pgarciacamou/csv-to-json.git"},{"ref: refs/heads/master":"0000000000000000000000000000000000000000 3ddfce49a0f3af7abaad8086a7b2224e706b1d4d Angelo Scandaliato <angelo@Angelos-MacBook-Pro.local> 1427743127 -0700\tclone: from https://github.com/pgarciacamou/csv-to-json.git"},{"ref: refs/heads/master":"x\u0001+)JMU07b040031Q��tv�\u000bve�i\u001b}x2c�sx�vK����L�=!P%A��.��z�)\f)\u001f�n�`\u000e�4��ٺ��BG��>\u0011\u0000�\u000e\u0019|x\u0001K��OR06g��MLNN�I-J"},{"ref: refs/heads/master":"�$|S��a�\u0017i��x��W�+\u0004�c�\u000f\u0018A��Hx��\f疰a2]#2}�9W��"},{"ref: refs/heads/master":"�0\u0010\u0000=�\u0015�\u0001%���\u0016D��7���m\r$����\u0016���a\u000e3�՚; \u000f���\u0002�\u0018d\u0010Ƥ��\u001c![��O�9J���<�8\u001aY��-p�Gip�%e��{�B����T%�Cj�\f\u0018\u001cQ@�\u000e���5�ݶ]�\u000e�ۜ{�\u0002���\u0000��=Yx\u0001��Ok\u00021\u0010�{�S\f9x�YEZ�W顅�\u0007KOR�f����N�$�\u0014�{��X�\u001e�\u001e�~�&uO5<"},{"ref: refs/heads/master":"^7\u001f��3=\u0002\u0005\u000f���z�U�\u0006er�\u0019\u001b<�=\u0017�\u0004q\u0004�E\"1\u0006��C�\u0011lųs�V0\u0012$\u0003آ6;��V�t\nx4\u001e\u0016\"N���\u000e-���NW�'����gdd\u0004�'D���UUE�\u000b��4T�UN\u001b��@����L�\u0017�"},{"ref: refs/heads/master":"#�\"J��h\u001c9S�^>�V�������0\u0007�hG\u0003Z�f�\r��m\u001a�\u0018�>j\u0013#/��\u0005=�ώU��r)\u0017O\u001989O~\u0001�\u0011��# pack-refs with: peeled fully-peeled \n3ddfce49a0f3af7abaad8086a7b2224e706b1d4d refs/remotes/origin/master\n3ddfce49a0f3af7abaad8086a7b2224e706b1d4d\nref: refs/remotes/origin/master\nnode_modules/The MIT License (MIT)\n\nCopyright (c) 2015 Pablo Garcia\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n//Converter Class \nvar Converter = require(\"csvtojson\").core.Converter;\nvar fs = require(\"fs\");\n\n//new converter instance \nvar csvConverter = new Converter({constructResult:true});\n\n//end_parsed will be emitted once parsing finished \ncsvConverter.on(\"end_parsed\",function(jsonObj){\n  fs.writeFile(\"./test.json\", JSON.stringify(jsonObj), function(err) {\n    if(err) return console.log(err);\n    console.log(\"The file was saved!\");\n  }); \n});\n\n//var csvFileDirectory = \"Users/angelo/adtile/capture-Pedometer2D/csv/WalkingData\";\n\nvar csvFileDirectory = __dirname;\n\nvar getAllFiles = function(dir) {\n    var results = [];\n\n    fs.readdirSync(dir).forEach(function(file) {\n\n        file = dir+'/'+file;\n        var stat = fs.statSync(file);\n\n        if (stat && stat.isDirectory()) {\n            results = results.concat(getAllFiles(file))\n        } else results.push(file);\n\n    });\n\n    return results;\n};\nvar files = getAllFiles(csvFileDirectory);\n\nfiles.forEach(function(fileName){\n\tvar fileStream = fs.createReadStream(fileName);\n\t//read from file \n\tfileStream.pipe(csvConverter);\n});# csv-to-json\nCreates a JSON file out of a CSV\n#!/usr/bin/env node\n\nvar web = require(\"../libs/interfaces\").web\nvar Converter = require(\"../libs/core\").Converter;\nvar converter = new Converter({\n    constructResult: false\n});\nvar usingPipe = false;\nvar csvData = \";\nvar fs = require(\"fs\");\nvar ws = process.stdout;\nvar sin = process.stdin;\nvar started = false;\n// process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nvar parsedCmd = commandParser();\n\nif (parsedCmd.cmd == \"parse\") {\n    process.stdout.write(\"[\\n\");\n    var args = parsedCmd.options;\n    args.constructResult = false;\n    var converter = new Converter(args);\n    if (parsedCmd.extra == \") {\n        process.stdin.resume();\n        process.stdin.pipe(converter);\n    } else {\n        var path = parsedCmd.extra;\n        if (fs.existsSync(path)) {\n            var rs = fs.createReadStream(path);\n            rs.pipe(converter);\n        } else {\n            console.log(\"File not found: \" + path);\n            process.exit(1);\n        }\n    }\n    converter.on(\"data\",function(d){\n      if (!started){\n        started=true;\n      }else{\n        process.stdout.write("},{"ref: refs/heads/master":"console.log(\"   startserver: \");"},{"ref: refs/heads/master":"console.log(\"       --port: the port which the web server runs on. default 8801. e.g. --port=8080\");"},{"ref: refs/heads/master":"console.log(\"       --urlpath: The path where to post csv data. default /parseCSV. e.g. --urlpath=/csv \");"},{"ref: refs/heads/master":"process.exit(0);"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"converter.on(\"end\""},{"ref: refs/heads/master":"setTimeout(function() {"},{"ref: refs/heads/master":"process.exit(0);"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"});"},{"ref: refs/heads/master":".DS_Store"},{"ref: refs/heads/master":"node_modules/"},{"ref: refs/heads/master":"*.swp"},{"ref: refs/heads/master":"*.swo"},{"ref: refs/heads/master":"Copyright (C) 2013 Keyang Xiang"},{"ref: refs/heads/master":"Permission is hereby granted"},{"ref: refs/heads/master":"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software."},{"ref: refs/heads/master":"THE SOFTWARE IS PROVIDED \"AS IS\""},{"ref: refs/heads/master":"#!/usr/bin/env node"},{"ref: refs/heads/master":"var web = require(\"../libs/interfaces\").web"},{"ref: refs/heads/master":"var Converter = require(\"../libs/core\").Converter;"},{"ref: refs/heads/master":"var converter = new Converter({"},{"ref: refs/heads/master":"constructResult: false"},{"ref: refs/heads/master":"});"},{"ref: refs/heads/master":"var usingPipe = false;"},{"ref: refs/heads/master":"var csvData = \";"},{"ref: refs/heads/master":"var fs = require(\"fs\");"},{"ref: refs/heads/master":"var ws = process.stdout;"},{"ref: refs/heads/master":"var sin = process.stdin;"},{"ref: refs/heads/master":"var started = false;"},{"ref: refs/heads/master":"// process.stdin.resume();"},{"ref: refs/heads/master":"process.stdin.setEncoding('utf8');"},{"ref: refs/heads/master":"var parsedCmd = commandParser();"},{"ref: refs/heads/master":"if (parsedCmd.cmd == \"parse\") {"},{"ref: refs/heads/master":"process.stdout.write(\"[\\n\");"},{"ref: refs/heads/master":"var args = parsedCmd.options;"},{"ref: refs/heads/master":"args.constructResult = false;"},{"ref: refs/heads/master":"var converter = new Converter(args);"},{"ref: refs/heads/master":"if (parsedCmd.extra == \") {"},{"ref: refs/heads/master":"process.stdin.resume();"},{"ref: refs/heads/master":"process.stdin.pipe(converter);"},{"ref: refs/heads/master":"} else {"},{"ref: refs/heads/master":"var path = parsedCmd.extra;"},{"ref: refs/heads/master":"if (fs.existsSync(path)) {"},{"ref: refs/heads/master":"var rs = fs.createReadStream(path);"},{"ref: refs/heads/master":"rs.pipe(converter);"},{"ref: refs/heads/master":"} else {"},{"ref: refs/heads/master":"console.log(\"File not found: \" + path);"},{"ref: refs/heads/master":"process.exit(1);"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"converter.on(\"data\""},{"ref: refs/heads/master":"if (!started){"},{"ref: refs/heads/master":"started=true;"},{"ref: refs/heads/master":"}else{"},{"ref: refs/heads/master":"process.stdout.write(\",\\n\")"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"process.stdout.write(d);"},{"ref: refs/heads/master":"});"},{"ref: refs/heads/master":"converter.on(\"end\""},{"ref: refs/heads/master":"process.stdout.write(\"\\n]\");"},{"ref: refs/heads/master":"});"},{"ref: refs/heads/master":"} else if (parsedCmd.cmd == \"startserver\") {"},{"ref: refs/heads/master":"var args = parsedCmd.options;"},{"ref: refs/heads/master":"web.startWebServer(args);"},{"ref: refs/heads/master":"return true;"},{"ref: refs/heads/master":"} else {"},{"ref: refs/heads/master":"_showHelp();"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function commandParser() {"},{"ref: refs/heads/master":"var cmdArr = process.argv;"},{"ref: refs/heads/master":"cmdArr.shift();"},{"ref: refs/heads/master":"cmdArr.shift();"},{"ref: refs/heads/master":"if (cmdArr.length === 0) {"},{"ref: refs/heads/master":"return {"},{"ref: refs/heads/master":"\"cmd\": \"parse\""},{"ref: refs/heads/master":"\"options\": {}"},{"ref: refs/heads/master":"\"extra\": \""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"if (cmdArr.length === 1) {"},{"ref: refs/heads/master":"var arg = cmdArr.shift();"},{"ref: refs/heads/master":"if (arg.toLowerCase().indexOf(\"help\") > -1) {"},{"ref: refs/heads/master":"_showHelp();"},{"ref: refs/heads/master":"} else if (isOption(arg)) {"},{"ref: refs/heads/master":"console.log(\"command cannot be omited\");"},{"ref: refs/heads/master":"_showHelp();"},{"ref: refs/heads/master":"} else if (arg.toLowerCase() == \"parse\") {"},{"ref: refs/heads/master":"return {"},{"ref: refs/heads/master":"\"cmd\": \"parse\""},{"ref: refs/heads/master":"\"options\": {}"},{"ref: refs/heads/master":"\"extra\": \""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"} else {"},{"ref: refs/heads/master":"return {"},{"ref: refs/heads/master":"\"cmd\": \"parse\""},{"ref: refs/heads/master":"\"options\": {}"},{"ref: refs/heads/master":"\"extra\": arg"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"var cmd = cmdArr.shift();"},{"ref: refs/heads/master":"var args = {};"},{"ref: refs/heads/master":"var extra = \";"},{"ref: refs/heads/master":"while (cmdArr.length) {"},{"ref: refs/heads/master":"if (cmdArr.length > 1 || isOption(cmdArr[0])) {"},{"ref: refs/heads/master":"var pair = cmdArr.shift();"},{"ref: refs/heads/master":"var pairArr = pair.split(\"=\");"},{"ref: refs/heads/master":"var key = pairArr[0];"},{"ref: refs/heads/master":"var val = pairArr[1];"},{"ref: refs/heads/master":"key = key.replace(\"--\""},{"ref: refs/heads/master":"args[key] = val;"},{"ref: refs/heads/master":"} else {"},{"ref: refs/heads/master":"extra = cmdArr.shift();"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"return {"},{"ref: refs/heads/master":"\"cmd\": cmd"},{"ref: refs/heads/master":"\"options\": args"},{"ref: refs/heads/master":"\"extra\": extra"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function isOption(arg) {"},{"ref: refs/heads/master":"return arg.indexOf(\"=\") > -1;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function _showHelp() {"},{"ref: refs/heads/master":"console.log(\"Usage: csvtojson <command> [<options>] [filepath] \");"},{"ref: refs/heads/master":"console.log(\");"},{"ref: refs/heads/master":"console.log(\"Commands: \");"},{"ref: refs/heads/master":"console.log(\"   parse: Parse a csv file to json\");"},{"ref: refs/heads/master":"console.log(\"   startserver: Start a web server\");"},{"ref: refs/heads/master":"console.log(\");"},{"ref: refs/heads/master":"console.log(\"Options: \");"},{"ref: refs/heads/master":"console.log(\"   parse: \");"},{"ref: refs/heads/master":"console.log(\"       --delimiter: delimiter to separate columns. default comma (,). e.g. --delimiter=#\")"},{"ref: refs/heads/master":"console.log(\"       --quote: quote surrounding a column content containing delimiters. default double quote (\\\"). e.g. --quote=# \");\n    console.log(\"   startserver: \");\n    console.log(\"       --port: the port which the web server runs on. default 8801. e.g. --port=8080\");\n    console.log(\"       --urlpath: The path where to post csv data. default /parseCSV. e.g. --urlpath=/csv \");\n    process.exit(0);\n}\nconverter.on(\"end\", function() {\n    setTimeout(function() {\n        process.exit(0);\n    }, 200);\n});\nmodule.exports=require(\"./libs/csv2json.js\");module.exports = Result;\nvar Writable = require(\"stream\").Writable;\nvar util = require(\"util\");\n\nfunction Result(csvParser) {\n  Writable.call(this);\n  this.parser = csvParser;\n  this.param=csvParser.param;\n  this.buffer =this.param.toArrayString?\":\"[\"+csvParser.getEol();\n  this.started = false;\n  var self = this;\n  this.parser.on(\"end\", function() {\n    if (!self.param.toArrayString){\n      self.buffer += self.parser.getEol() + \"]\";\n    }\n  });\n}\nutil.inherits(Result, Writable);\nResult.prototype._write = function(data, encoding, cb) {\n  if (encoding == \"buffer\") {\n    encoding = \"utf8\";\n  }\n  if (this.param.toArrayString){\n    this.buffer+=data.toString(encoding);\n  }else{\n    if (this.started) {\n      this.buffer +="},{"ref: refs/heads/master":"\"trim\": true"},{"ref: refs/heads/master":"\"checkType\":true"},{"ref: refs/heads/master":"\"toArrayString\":false //stream out array of json string. (usable if downstream is file writer etc)"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"if (params && typeof params == \"object\") {"},{"ref: refs/heads/master":"for (var key in params) {"},{"ref: refs/heads/master":"_param[key] = params[key];"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"} else if (typeof params == \"boolean\") { //backcompatible with older version"},{"ref: refs/heads/master":"console.warn(\"Parameter should be a JSON object like {'constructResult':false}\");"},{"ref: refs/heads/master":"_param.constructResult = params;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"this.param = _param;"},{"ref: refs/heads/master":"this.parseRules = [];"},{"ref: refs/heads/master":"this.resultObject = new Result(this);"},{"ref: refs/heads/master":"this.pipe(this.resultObject);"},{"ref: refs/heads/master":"if (!this.param.constructResult) {"},{"ref: refs/heads/master":"this.resultObject.disableConstruct();"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"this.headRow = [];"},{"ref: refs/heads/master":"this._buffer = \"; //line buffer"},{"ref: refs/heads/master":"this._recordBuffer=\"; //record buffer"},{"ref: refs/heads/master":"this.rowIndex = 0;"},{"ref: refs/heads/master":"this._isStarted = false;"},{"ref: refs/heads/master":"var self = this;"},{"ref: refs/heads/master":"this._callback = null;"},{"ref: refs/heads/master":"this.init();"},{"ref: refs/heads/master":"return this;"},{"ref: refs/heads/master":"};"},{"ref: refs/heads/master":"utils.inherits(csvAdv"},{"ref: refs/heads/master":"csvAdv.prototype.init = function() {"},{"ref: refs/heads/master":"require(\"./init_onend.js\").call(this);"},{"ref: refs/heads/master":"require(\"./init_onrecord.js\").call(this);"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"csvAdv.prototype._isToogleQuote = function(segment) {"},{"ref: refs/heads/master":"var quote = this.param.quote;"},{"ref: refs/heads/master":"var regExp = new RegExp(quote"},{"ref: refs/heads/master":"var match = segment.toString().match(regExp);"},{"ref: refs/heads/master":"if (match) {"},{"ref: refs/heads/master":"return match.length % 2 != 0;"},{"ref: refs/heads/master":"} else {"},{"ref: refs/heads/master":"return false;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"//convert two continous double quote to one as per csv definition"},{"ref: refs/heads/master":"csvAdv.prototype._twoDoubleQuote=function(segment){"},{"ref: refs/heads/master":"var quote = this.param.quote;"},{"ref: refs/heads/master":"var regExp = new RegExp(quote+quote"},{"ref: refs/heads/master":"return segment.toString().replace(regExp"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"//on line poped"},{"ref: refs/heads/master":"csvAdv.prototype._line=function(line"},{"ref: refs/heads/master":"this._recordBuffer+=line;"},{"ref: refs/heads/master":"if (!this._isToogleQuote(this._recordBuffer)){ //if a complete record is in buffer. start the parse"},{"ref: refs/heads/master":"var data=this._recordBuffer;"},{"ref: refs/heads/master":"this._recordBuffer=\";"},{"ref: refs/heads/master":"this._record(data"},{"ref: refs/heads/master":"}else{ //if the record in buffer is not a complete record (quote does not match). wait next line"},{"ref: refs/heads/master":"this._recordBuffer+=this.eol;"},{"ref: refs/heads/master":"if (lastLine){"},{"ref: refs/heads/master":"throw (\"Incomplete CSV file detected. Quotes does not match in pairs.\");"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"return;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"csvAdv.prototype._transform = function(data"},{"ref: refs/heads/master":"var self = this;"},{"ref: refs/heads/master":"if (encoding == \"buffer\") {"},{"ref: refs/heads/master":"encoding = \"utf8\";"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"this._buffer += data.toString(encoding);"},{"ref: refs/heads/master":"if (!this.eol) {"},{"ref: refs/heads/master":"if (this._buffer.indexOf(\"\\r\\n\") > -1) { //csv from windows"},{"ref: refs/heads/master":"this.eol = \"\\r\\n\";"},{"ref: refs/heads/master":"} else if (this._buffer.indexOf(\"\\n\") > -1) {"},{"ref: refs/heads/master":"this.eol = \"\\n\";"},{"ref: refs/heads/master":"} else if (this._buffer.indexOf(\"\\r\") > -1) {"},{"ref: refs/heads/master":"this.eol = \"\\r\";"},{"ref: refs/heads/master":"} else if (this._buffer.indexOf(eol)) {"},{"ref: refs/heads/master":"this.eol = eol;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"if (this.param.toArrayString){"},{"ref: refs/heads/master":"if (this.rowIndex===0){"},{"ref: refs/heads/master":"this.push(\"[\"+this.getEol()"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"if (this.eol) {"},{"ref: refs/heads/master":"//console.log(this._buffer);"},{"ref: refs/heads/master":"if (this._buffer.indexOf(this.eol) > -1) { //if current data contains 1..* line break"},{"ref: refs/heads/master":"var arr = this._buffer.split(this.eol);"},{"ref: refs/heads/master":"while (arr.length > 1) {"},{"ref: refs/heads/master":"var data = arr.shift();"},{"ref: refs/heads/master":"this._line(data);"},{"ref: refs/heads/master":"//this.emit(\"record\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"this._buffer = arr[0]; //whats left (maybe half line). push to buffer"},{"ref: refs/heads/master":"cb();"},{"ref: refs/heads/master":"}else{ //if there is no line break appeared. wait next loop until it appears."},{"ref: refs/heads/master":"cb();"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}else{"},{"ref: refs/heads/master":"cb();"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"};"},{"ref: refs/heads/master":"csvAdv.prototype._flush = function(cb) {"},{"ref: refs/heads/master":"if (this._buffer.length != 0) { //finished but still has buffer data. emit last line"},{"ref: refs/heads/master":"this._line(this._buffer"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"if (this.param.toArrayString){"},{"ref: refs/heads/master":"this.push(this.getEol()+\"]\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"cb();"},{"ref: refs/heads/master":"};"},{"ref: refs/heads/master":"csvAdv.prototype.getEol = function() {"},{"ref: refs/heads/master":"return this.eol ? this.eol : eol;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"csvAdv.prototype._headRowProcess = function(headRow) {"},{"ref: refs/heads/master":"this.headRow = headRow;"},{"ref: refs/heads/master":"this.parseRules = parserMgr.initParsers(headRow"},{"ref: refs/heads/master":"};"},{"ref: refs/heads/master":"csvAdv.prototype._rowProcess = function(row"},{"ref: refs/heads/master":"for (var i = 0; i < this.parseRules.length; i++) {"},{"ref: refs/heads/master":"var item = row[i];"},{"ref: refs/heads/master":"var parser = this.parseRules[i];"},{"ref: refs/heads/master":"var head = this.headRow[i];"},{"ref: refs/heads/master":"parser.parse({"},{"ref: refs/heads/master":"head: head"},{"ref: refs/heads/master":"item: item"},{"ref: refs/heads/master":"itemIndex: i"},{"ref: refs/heads/master":"rawRow: row"},{"ref: refs/heads/master":"resultRow: resultRow"},{"ref: refs/heads/master":"rowIndex: index"},{"ref: refs/heads/master":"resultObject: this.resultObject"},{"ref: refs/heads/master":"config:this.param || {}"},{"ref: refs/heads/master":"});"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"};"},{"ref: refs/heads/master":"csvAdv.prototype.fromString = function(csvString"},{"ref: refs/heads/master":"var rs = new Readable();"},{"ref: refs/heads/master":"rs._read = function() {"},{"ref: refs/heads/master":"this.push(csvString);"},{"ref: refs/heads/master":"this.push(null);"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"rs.pipe(this);"},{"ref: refs/heads/master":"if (cb && typeof cb == \"function\") {"},{"ref: refs/heads/master":"this._callback = cb;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"};"},{"ref: refs/heads/master":"var parserMgr = require(\"./parserMgr.js\");"},{"ref: refs/heads/master":"var defaultParsers = [{"},{"ref: refs/heads/master":"\"name\": \"array\""},{"ref: refs/heads/master":"\"regExp\": /^\\*array\\*/"},{"ref: refs/heads/master":"\"parserFunc\": _arrayParser"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"\"name\": \"json\""},{"ref: refs/heads/master":"\"regExp\": /^\\*json\\*/"},{"ref: refs/heads/master":"\"parserFunc\":require(\"./parser_json.js\")"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"\"name\": \"omit\""},{"ref: refs/heads/master":"\"regExp\": /^\\*omit\\*/"},{"ref: refs/heads/master":"\"parserFunc\": function() {}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"\"name\": \"jsonarray\""},{"ref: refs/heads/master":"\"regExp\": /^\\*jsonarray\\*/"},{"ref: refs/heads/master":"\"parserFunc\": _jsonArrParser"},{"ref: refs/heads/master":"}];"},{"ref: refs/heads/master":"function initDefaultParsers() {"},{"ref: refs/heads/master":"for (var i = 0; i < defaultParsers.length; i++) {"},{"ref: refs/heads/master":"var parserCfg = defaultParsers[i];"},{"ref: refs/heads/master":"parserMgr.addParser(parserCfg.name"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function _arrayParser(params){"},{"ref: refs/heads/master":"var fieldName=params.head.replace(this.regExp"},{"ref: refs/heads/master":"if (params.resultRow[fieldName]==undefined){"},{"ref: refs/heads/master":"params.resultRow[fieldName]=[];"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"params.resultRow[fieldName].push(params.item);"},{"ref: refs/heads/master":"//console.log(\"array parser has been deprecated. See https://github.com/Keyang/node-csvtojson#default-parsers\");"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function _jsonArrParser(params){"},{"ref: refs/heads/master":"var fieldStr=params.head.replace(this.regExp"},{"ref: refs/heads/master":"var headArr=fieldStr.split(\".\");"},{"ref: refs/heads/master":"var pointer=params.resultRow;"},{"ref: refs/heads/master":"while (headArr.length>1){"},{"ref: refs/heads/master":"var headStr=headArr.shift();"},{"ref: refs/heads/master":"if (pointer[headStr]==undefined){"},{"ref: refs/heads/master":"pointer[headStr]={};"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"pointer=pointer[headStr];"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"var arrFieldName=headArr.shift();"},{"ref: refs/heads/master":"if (pointer[arrFieldName]==undefined){"},{"ref: refs/heads/master":"pointer[arrFieldName]=[];"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"pointer[arrFieldName].push(params.item);"},{"ref: refs/heads/master":"//console.log(\"json array parser has been deprecated. See https://github.com/Keyang/node-csvtojson#default-parsers\");"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"initDefaultParsers();"},{"ref: refs/heads/master":"/**"},{"ref: refs/heads/master":"* Subscribe to \"end\" events fo Converter."},{"ref: refs/heads/master":"*/"},{"ref: refs/heads/master":"module.exports = function() {"},{"ref: refs/heads/master":"var self = this;"},{"ref: refs/heads/master":"self.on(\"end\""},{"ref: refs/heads/master":"var finalResult = self.param.constructResult ? self.resultObject.getBuffer() : {};"},{"ref: refs/heads/master":"self.emit(\"end_parsed\""},{"ref: refs/heads/master":"if (self._callback && typeof self._callback == \"function\") {"},{"ref: refs/heads/master":"var func = self._callback;"},{"ref: refs/heads/master":"self._callback = null;"},{"ref: refs/heads/master":"func(null"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"});"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"module.exports.Converter=require(\"./csvConverter.js\");"},{"ref: refs/heads/master":"module.exports.Parser=require(\"./parser.js\");"},{"ref: refs/heads/master":"module.exports.parserMgr=require(\"./parserMgr.js\");"},{"ref: refs/heads/master":"/**"},{"ref: refs/heads/master":"*Subscriptor of record event of Converter"},{"ref: refs/heads/master":"*/"},{"ref: refs/heads/master":"var os = require(\"os\");"},{"ref: refs/heads/master":"module.exports = function() {"},{"ref: refs/heads/master":"var self = this;"},{"ref: refs/heads/master":""},{"ref: refs/heads/master":"this._record=function(rowStr"},{"ref: refs/heads/master":"var quote = self.param.quote;"},{"ref: refs/heads/master":"var delimiter = self.param.delimiter;"},{"ref: refs/heads/master":"var rowArr = rowStr.split(delimiter);"},{"ref: refs/heads/master":"var row = [];"},{"ref: refs/heads/master":"var inquote = false;"},{"ref: refs/heads/master":"var quoteBuff = \";"},{"ref: refs/heads/master":"for (var i = 0; i < rowArr.length; i++) {"},{"ref: refs/heads/master":"var ele = rowArr[i];"},{"ref: refs/heads/master":"if (self._isToogleQuote(ele)) {//if current col has odd quotes"},{"ref: refs/heads/master":"if (inquote) {//if currently in open quote status"},{"ref: refs/heads/master":"quoteBuff += delimiter;"},{"ref: refs/heads/master":"inquote = false;"},{"ref: refs/heads/master":"quoteBuff += this._twoDoubleQuote(ele.substr(0"},{"ref: refs/heads/master":"if (self.param.trim){"},{"ref: refs/heads/master":"quoteBuff=quoteBuff.toString().trim();"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"row.push(quoteBuff);"},{"ref: refs/heads/master":"quoteBuff = \";"},{"ref: refs/heads/master":"} else {// currently not in open quote status"},{"ref: refs/heads/master":"inquote = true;"},{"ref: refs/heads/master":"quoteBuff += this._twoDoubleQuote(ele.substring(1));"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"} else {// if current col has even quotes"},{"ref: refs/heads/master":"if (inquote) {//if current status is in quote"},{"ref: refs/heads/master":"quoteBuff += delimiter + this._twoDoubleQuote(ele);"},{"ref: refs/heads/master":"} else {// if current status is not in quote"},{"ref: refs/heads/master":"if (ele.indexOf(quote) === 0 && ele[ele.length - 1] == quote) {//if current col contain full quote segment"},{"ref: refs/heads/master":"ele = ele.substring(1"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"if (self.param.trim){"},{"ref: refs/heads/master":"ele=ele.toString().trim();"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"row.push(this._twoDoubleQuote(ele));"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"if (index == 0) {"},{"ref: refs/heads/master":"self._headRowProcess(row);"},{"ref: refs/heads/master":"} else if (rowStr.length > 0) {"},{"ref: refs/heads/master":"var resultRow = {};"},{"ref: refs/heads/master":"self._rowProcess(row"},{"ref: refs/heads/master":"self.emit(\"record_parsed\""},{"ref: refs/heads/master":"if (self.param.toArrayString){"},{"ref: refs/heads/master":"if (index>1){"},{"ref: refs/heads/master":"self.push(\",\"+self.eol)"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"self.push(JSON.stringify(resultRow)"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"};"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"module.exports=Parser;"},{"ref: refs/heads/master":"function Parser(name"},{"ref: refs/heads/master":"this.name=typeof name == \"undefined\"?\"Default\":name;"},{"ref: refs/heads/master":"this.regExp=null;"},{"ref: refs/heads/master":"this.type=\";"},{"ref: refs/heads/master":"if (typeof regExp !=\"undefined\"){"},{"ref: refs/heads/master":"if (typeof regExp ==\"string\"){"},{"ref: refs/heads/master":"this.regExp=new RegExp(regExp);"},{"ref: refs/heads/master":"}else{"},{"ref: refs/heads/master":"this.regExp=regExp;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"if (typeof parser!=\"undefined\"){"},{"ref: refs/heads/master":"this.parse=parser;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"};"},{"ref: refs/heads/master":"Parser.prototype.test=function(str){"},{"ref: refs/heads/master":"if (this.regExp==null){"},{"ref: refs/heads/master":"return true;"},{"ref: refs/heads/master":"}else{"},{"ref: refs/heads/master":"return this.regExp.test(str);"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"// Parser.prototype.newProcess=function(mixedColumnTitle){"},{"ref: refs/heads/master":"//     var title=this.getTitle(mixedColumnTitle);"},{"ref: refs/heads/master":"//     return {"},{"ref: refs/heads/master":"//         \"title\""},{"ref: refs/heads/master":"//     }"},{"ref: refs/heads/master":"// }"},{"ref: refs/heads/master":"// Parser.prototype.getTitle=function(mixedTitle){"},{"ref: refs/heads/master":"//     return mixedTitle.replace(this.regExp"},{"ref: refs/heads/master":"// }"},{"ref: refs/heads/master":"Parser.prototype.parse=function(params){"},{"ref: refs/heads/master":"params.resultRow[params.head]=params.item;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"Parser.prototype.getHead=function(){"},{"ref: refs/heads/master":"return this.head;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"Parser.prototype.clone=function(){"},{"ref: refs/heads/master":"return new Parser(this.name"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"Parser.prototype.getName=function(){"},{"ref: refs/heads/master":"return this.name;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"//module interfaces"},{"ref: refs/heads/master":"module.exports.addParser = addParser;"},{"ref: refs/heads/master":"module.exports.initParsers = initParsers;"},{"ref: refs/heads/master":"module.exports.getParser = getParser;"},{"ref: refs/heads/master":"//implementation"},{"ref: refs/heads/master":"var registeredParsers = [];"},{"ref: refs/heads/master":"var Parser = require(\"./parser.js\");"},{"ref: refs/heads/master":"function registerParser(parser) {"},{"ref: refs/heads/master":"if (parser instanceof Parser) {"},{"ref: refs/heads/master":"if (registeredParsers.indexOf(parser) == -1) {"},{"ref: refs/heads/master":"registeredParsers.push(parser);"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function addParser(name"},{"ref: refs/heads/master":"var parser = new Parser(name"},{"ref: refs/heads/master":"registerParser(parser);"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function initParsers(row"},{"ref: refs/heads/master":"var parsers = [];"},{"ref: refs/heads/master":"for (var i = 0; i < row.length; i++) {"},{"ref: refs/heads/master":"var columnTitle = row[i];"},{"ref: refs/heads/master":"parsers.push(getParser(columnTitle"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"return parsers;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function getParser(columnTitle"},{"ref: refs/heads/master":"if (!columnTitle){"},{"ref: refs/heads/master":"columnTitle=\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"var type=\";"},{"ref: refs/heads/master":"if (checkType){"},{"ref: refs/heads/master":"var split=splitTitle(columnTitle);"},{"ref: refs/heads/master":"type=split[0];"},{"ref: refs/heads/master":"columnTitle=split[1];"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"for (var i = 0; i < registeredParsers.length; i++) {"},{"ref: refs/heads/master":"var parser = registeredParsers[i];"},{"ref: refs/heads/master":"if (parser.test(columnTitle)) {"},{"ref: refs/heads/master":"var inst = parser.clone();"},{"ref: refs/heads/master":"inst.head = columnTitle;"},{"ref: refs/heads/master":"inst.type=type;"},{"ref: refs/heads/master":"return inst;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"var inst= getParserByName(\"json\""},{"ref: refs/heads/master":"inst.type=type;"},{"ref: refs/heads/master":"return inst;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function splitTitle(columnTitle){"},{"ref: refs/heads/master":"var splitArr=columnTitle.split(\"#\");"},{"ref: refs/heads/master":"if (splitArr.length ===1){"},{"ref: refs/heads/master":"splitArr.unshift(\")"},{"ref: refs/heads/master":"return splitArr"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"if (splitArr.length>2){"},{"ref: refs/heads/master":"var rtn=[];"},{"ref: refs/heads/master":"rtn.push(splitArr.shift());"},{"ref: refs/heads/master":"rtn.push(splitArr.join(\"#\"));"},{"ref: refs/heads/master":"return rtn"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"return splitArr;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function getParserByName(parserName"},{"ref: refs/heads/master":"for (var i = 0; i < registeredParsers.length; i++) {"},{"ref: refs/heads/master":"var parser = registeredParsers[i];"},{"ref: refs/heads/master":"if (parser.getName() == parserName) {"},{"ref: refs/heads/master":"var inst = parser.clone();"},{"ref: refs/heads/master":"inst.head = columnTitle;"},{"ref: refs/heads/master":"return inst;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"return new Parser();"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"require(\"./defaultParsers.js\");"},{"ref: refs/heads/master":"module.exports = function(params) {"},{"ref: refs/heads/master":"var fieldStr = this.getHead().replace(this.regExp"},{"ref: refs/heads/master":"var headArr = fieldStr.split(\".\");"},{"ref: refs/heads/master":"var pointer = params.resultRow;"},{"ref: refs/heads/master":"var arrReg = /\\[([0-9]*)\\]/;"},{"ref: refs/heads/master":"while (headArr.length > 1) { //go through all children"},{"ref: refs/heads/master":"var headStr = headArr.shift();"},{"ref: refs/heads/master":"var match = headStr.match(arrReg);"},{"ref: refs/heads/master":"if (match) { //if its array"},{"ref: refs/heads/master":"if (pointer[headStr.replace(match[0]"},{"ref: refs/heads/master":"pointer[headStr.replace(match[0]"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"var index = match[1]; //get index where json object should stay"},{"ref: refs/heads/master":"pointer = pointer[headStr.replace(match[0]"},{"ref: refs/heads/master":"if (index == \") { //if its dynamic array index"},{"ref: refs/heads/master":"index = pointer.length;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"if (!pointer[index]) { //current index in the array is empty. we need create a new json object."},{"ref: refs/heads/master":"pointer[index] = {};"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"pointer = pointer[index];"},{"ref: refs/heads/master":"} else { //not array"},{"ref: refs/heads/master":"if (pointer[headStr] == undefined) {"},{"ref: refs/heads/master":"pointer[headStr] = {};"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"pointer = pointer[headStr];"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"//now the pointer is pointing the position to add a key/value pair."},{"ref: refs/heads/master":"var key = headArr.shift();"},{"ref: refs/heads/master":"var match = key.match(arrReg);"},{"ref: refs/heads/master":"if (match) { // the last element is an array"},{"ref: refs/heads/master":"var index = match[1];"},{"ref: refs/heads/master":"key = key.replace(match[0]"},{"ref: refs/heads/master":"if (!pointer[key] || !pointer[key] instanceof Array) {"},{"ref: refs/heads/master":"pointer[key] = [];"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"if (index == \") {"},{"ref: refs/heads/master":"index = pointer[key].length;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"pointer[key][index] = params.item;"},{"ref: refs/heads/master":"} else { //last element is normal"},{"ref: refs/heads/master":"if (params.config && params.config.checkType) {"},{"ref: refs/heads/master":"try {"},{"ref: refs/heads/master":"switch (this.type) {"},{"ref: refs/heads/master":"case \"date\":"},{"ref: refs/heads/master":"var d = new Date(params.item);"},{"ref: refs/heads/master":"if (isNaN(d.getTime())) {"},{"ref: refs/heads/master":"d = params.item;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"pointer[key] = d;"},{"ref: refs/heads/master":"break;"},{"ref: refs/heads/master":"case \"number\":"},{"ref: refs/heads/master":"if (!isNaN(params.item)) {"},{"ref: refs/heads/master":"pointer[key] = parseFloat(params.item);"},{"ref: refs/heads/master":"} else {"},{"ref: refs/heads/master":"pointer[key] = params.item;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"break;"},{"ref: refs/heads/master":"case \":"},{"ref: refs/heads/master":"pointer[key] = JSON.parse(params.item);"},{"ref: refs/heads/master":"break;"},{"ref: refs/heads/master":"case \"string\":"},{"ref: refs/heads/master":"default:"},{"ref: refs/heads/master":"pointer[key] = params.item;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"} catch (e) {"},{"ref: refs/heads/master":"pointer[key] = params.item;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"} else {"},{"ref: refs/heads/master":"pointer[key] = params.item;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"module.exports.core=require(\"./core\");"},{"ref: refs/heads/master":"module.exports.interfaces=require(\"./interfaces\");module.exports=require(\"./main.js\");/**"},{"ref: refs/heads/master":"* Convert input to process stdout"},{"ref: refs/heads/master":"*/"},{"ref: refs/heads/master":"//module interfaces"},{"ref: refs/heads/master":"module.exports.convertFile=convertFile;"},{"ref: refs/heads/master":"module.exports.convertString=convertString;"},{"ref: refs/heads/master":"//implementation"},{"ref: refs/heads/master":"var Converter=require(\"../../core\").Converter;"},{"ref: refs/heads/master":"function convertFile(fileName){"},{"ref: refs/heads/master":"var csvConverter=_initConverter();"},{"ref: refs/heads/master":"csvConverter.from(fileName);"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function convertString(csvString){"},{"ref: refs/heads/master":"var csvConverter=_initConverter();"},{"ref: refs/heads/master":"csvConverter.from(csvString);"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function _initConverter(){"},{"ref: refs/heads/master":"var csvConverter=new Converter();"},{"ref: refs/heads/master":"var started=false;"},{"ref: refs/heads/master":"var writeStream=process.stdout;"},{"ref: refs/heads/master":"csvConverter.on(\"record_parsed\""},{"ref: refs/heads/master":"if (started){"},{"ref: refs/heads/master":"writeStream.write(\",\\n\")"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"writeStream.write(JSON.stringify(rowJSON));  //write parsed JSON object one by one."},{"ref: refs/heads/master":"if (started==false){"},{"ref: refs/heads/master":"started=true;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"});"},{"ref: refs/heads/master":"writeStream.write(\"[\\n\"); //write array symbol"},{"ref: refs/heads/master":"csvConverter.on(\"end_parsed\""},{"ref: refs/heads/master":"writeStream.write(\"\\n]\"); //end array symbol"},{"ref: refs/heads/master":"});"},{"ref: refs/heads/master":"csvConverter.on(\"error\""},{"ref: refs/heads/master":"console.error(err);"},{"ref: refs/heads/master":"process.exit(-1);"},{"ref: refs/heads/master":"});"},{"ref: refs/heads/master":"return csvConverter;"},{"ref: refs/heads/master":"}module.exports.web=require(\"./web\");"},{"ref: refs/heads/master":"module.exports.cli=require(\"./cli\");module.exports=require(\"./webServer.js\");//module interfaces"},{"ref: refs/heads/master":"module.exports.startWebServer=startWebServer;"},{"ref: refs/heads/master":"module.exports.applyWebServer=applyWebServer;"},{"ref: refs/heads/master":"//implementation"},{"ref: refs/heads/master":"// var express=require(\"express\");"},{"ref: refs/heads/master":"// var expressApp=express();"},{"ref: refs/heads/master":"var http=require(\"http\");"},{"ref: refs/heads/master":"var CSVConverter=require(\"../../core\").Converter;"},{"ref: refs/heads/master":"var defaultArgs={"},{"ref: refs/heads/master":"\"port\":\"8801\""},{"ref: refs/heads/master":"\"urlpath\":\"/parseCSV\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"var server=null;"},{"ref: refs/heads/master":"function applyWebServer(app"},{"ref: refs/heads/master":"console.error(\"applyWebServer is deprecated. Use core you create your own handler.\");"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function startWebServer(args){"},{"ref: refs/heads/master":"if (typeof args==\"undefined\"){"},{"ref: refs/heads/master":"args={};"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"var serverArgs={};"},{"ref: refs/heads/master":"for (var key in defaultArgs){"},{"ref: refs/heads/master":"if (args[key]){"},{"ref: refs/heads/master":"serverArgs[key]=args[key];"},{"ref: refs/heads/master":"}else{"},{"ref: refs/heads/master":"serverArgs[key]=defaultArgs[key];"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"server=http.createServer();"},{"ref: refs/heads/master":"server.on(\"request\""},{"ref: refs/heads/master":"if (req.url==serverArgs.urlpath && req.method ==\"POST\"){"},{"ref: refs/heads/master":"_POSTData(req"},{"ref: refs/heads/master":"}else{"},{"ref: refs/heads/master":"res.end(\"Please post data to: \"+serverArgs.urlpath);"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"});"},{"ref: refs/heads/master":"server.listen(serverArgs.port);"},{"ref: refs/heads/master":"//expressApp.use(express.bodyParser());"},{"ref: refs/heads/master":"// expressApp.post(serverArgs.urlpath"},{"ref: refs/heads/master":"// expressApp.get(\"/\""},{"ref: refs/heads/master":"//     res.end(\"POST to \"+serverArgs.urlpath+\" with CSV data to get parsed.\");"},{"ref: refs/heads/master":"// });"},{"ref: refs/heads/master":"// expressApp.listen(serverArgs.port);"},{"ref: refs/heads/master":"console.log(\"CSV Web Server Listen On:\"+serverArgs.port);"},{"ref: refs/heads/master":"console.log(\"POST to \"+serverArgs.urlpath+\" with CSV data to get parsed.\");"},{"ref: refs/heads/master":"return server;"},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"function _POSTData(req"},{"ref: refs/heads/master":"var converter=new CSVConverter({constructResult:false});"},{"ref: refs/heads/master":"req.pipe(converter).pipe(res);"},{"ref: refs/heads/master":""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"{"},{"ref: refs/heads/master":"\"name\": \"csvtojson\""},{"ref: refs/heads/master":"\"description\": \"A tool concentrating on converting csv data to JSON with customised parser supporting\""},{"ref: refs/heads/master":"\"author\": {"},{"ref: refs/heads/master":"\"name\": \"Keyang Xiang\""},{"ref: refs/heads/master":"\"email\": \"keyang.xiang@gmail.com\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"\"homepage\": \"http://keyangxiang.com/blog/csv2json/\""},{"ref: refs/heads/master":"\"bugs\": {"},{"ref: refs/heads/master":"\"url\": \"https://github.com/Keyang/node-csvtojson/issues\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"\"repository\": {"},{"ref: refs/heads/master":"\"type\": \"git\""},{"ref: refs/heads/master":"\"url\": \"https://github.com/Keyang/node-csvtojson.git\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"\"contributors\": ["},{"ref: refs/heads/master":"{"},{"ref: refs/heads/master":"\"name\": \"Keyang Xiang\""},{"ref: refs/heads/master":"\"email\": \"keyang.xiang@gmail.com\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"]"},{"ref: refs/heads/master":"\"version\": \"0.3.19\""},{"ref: refs/heads/master":"\"keywords\": ["},{"ref: refs/heads/master":"csv"},{"ref: refs/heads/master":"json"},{"ref: refs/heads/master":"convert"},{"ref: refs/heads/master":"parser"},{"ref: refs/heads/master":"exntendible"},{"ref: refs/heads/master":"plugin"},{"ref: refs/heads/master":"]"},{"ref: refs/heads/master":"\"bin\": {"},{"ref: refs/heads/master":"\"csvtojson\": \"./bin/csvtojson\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"\"license\": ["},{"ref: refs/heads/master":"{"},{"ref: refs/heads/master":"\"type\": \"MIT\""},{"ref: refs/heads/master":"\"url\": \"https://github.com/Keyang/node-csvtojson/blob/master/LICENSE\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"]"},{"ref: refs/heads/master":"\"engines\": {"},{"ref: refs/heads/master":"\"node\": \">=0.10\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"\"gitHead\": \"8e6744461bc0ffc4a24738be082db3308c6028b5\""},{"ref: refs/heads/master":"\"_id\": \"csvtojson@0.3.19\""},{"ref: refs/heads/master":"\"scripts\": {}"},{"ref: refs/heads/master":"\"_shasum\": \"f8ada7f925b00d08bba0c36a7b76c63aabecb15e\""},{"ref: refs/heads/master":"\"_from\": \"csvtojson@>=0.3.19 <0.4.0\""},{"ref: refs/heads/master":"\"_npmVersion\": \"1.4.28\""},{"ref: refs/heads/master":"\"_npmUser\": {"},{"ref: refs/heads/master":"\"name\": \"keyang\""},{"ref: refs/heads/master":"\"email\": \"keyang.xiang@gmail.com\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"\"maintainers\": ["},{"ref: refs/heads/master":"{"},{"ref: refs/heads/master":"\"name\": \"keyang\""},{"ref: refs/heads/master":"\"email\": \"keyang.xiang@gmail.com\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"]"},{"ref: refs/heads/master":"\"dist\": {"},{"ref: refs/heads/master":"\"shasum\": \"f8ada7f925b00d08bba0c36a7b76c63aabecb15e\""},{"ref: refs/heads/master":"\"tarball\": \"http://registry.npmjs.org/csvtojson/-/csvtojson-0.3.19.tgz\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"\"directories\": {}"},{"ref: refs/heads/master":"\"_resolved\": \"https://registry.npmjs.org/csvtojson/-/csvtojson-0.3.19.tgz\""},{"ref: refs/heads/master":"}"},{"ref: refs/heads/master":"TIMESTAMP"},{"ref: refs/heads/master":1395426422},{"ref: refs/heads/master":1395426422},{"ref: refs/heads/master":1395426422},{"ref: refs/heads/master":1395426422},{"ref: refs/heads/master":1395426422},{"ref: refs/heads/master":"All you need nodejs csv to json converter. Support big json data"},{"ref: refs/heads/master":"#IMPORTANT!!"},{"ref: refs/heads/master":"Since version 0.3"},{"ref: refs/heads/master":"```js"},{"ref: refs/heads/master":"//Converter Class"},{"ref: refs/heads/master":"var Converter=require(\"csvtojson\").core.Converter;"},{"ref: refs/heads/master":"var fs=require(\"fs\");"},{"ref: refs/heads/master":"var csvFileName=\"./myCSVFile\";"},{"ref: refs/heads/master":"var fileStream=fs.createReadStream(csvFileName);"},{"ref: refs/heads/master":"//new converter instance"},{"ref: refs/heads/master":"var csvConverter=new Converter({constructResult:true});"},{"ref: refs/heads/master":"//end_parsed will be emitted once parsing finished"},{"ref: refs/heads/master":"csvConverter.on(\"end_parsed\""},{"ref: refs/heads/master":"console.log(jsonObj); //here is your result json object"},{"ref: refs/heads/master":"});"},{"ref: refs/heads/master":"//read from file"},{"ref: refs/heads/master":"fileStream.pipe(csvConverter);"},{"ref: refs/heads/master":"```"},{"ref: refs/heads/master":"To convert from a string"},{"ref: refs/heads/master":"```js"},{"ref: refs/heads/master":"csvConverter.from(csvString);"},{"ref: refs/heads/master":"```"},{"ref: refs/heads/master":"Now it is:"},{"ref: refs/heads/master":"```js"},{"ref: refs/heads/master":"csvConverter.fromString(csvString"},{"ref: refs/heads/master":"```"},{"ref: refs/heads/master":"The callback function above is optional. see [Parse String](#parse-string)."},{"ref: refs/heads/master":"After version 0.3"},{"ref: refs/heads/master":"##Menu"},{"ref: refs/heads/master":"* [Installation](#installation)"},{"ref: refs/heads/master":"* [Example](#example)"},{"ref: refs/heads/master":"* [CLI Usage](#usage)"},{"ref: refs/heads/master":"* [CLI Tool](#command-line-tools)"},{"ref: refs/heads/master":"* [Web Service](#webservice)"},{"ref: refs/heads/master":"* [Demo Product](#demo-product)"},{"ref: refs/heads/master":"* [Quick Start](#quick-start)"},{"ref: refs/heads/master":"* [Parameters](#params)"},{"ref: refs/heads/master":"* [Customised Parser](#parser)"},{"ref: refs/heads/master":"* [Webserver](#webserver)"},{"ref: refs/heads/master":"* [Events](#events)"},{"ref: refs/heads/master":"* [Built-in Parsers](#default-parsers)"},{"ref: refs/heads/master":"* [Example](#example)"},{"ref: refs/heads/master":"* [Big CSV File Streaming](#big-csv-file)"},{"ref: refs/heads/master":"* [Process Big CSV File in CLI](#convert-big-csv-file-with-command-line-tool)"},{"ref: refs/heads/master":"* [Column Array](#column-array)"},{"ref: refs/heads/master":"* [Parse String](#parse-string)"},{"ref: refs/heads/master":"* [Empowered JSON Parser](#empowered-json-parser)"},{"ref: refs/heads/master":"* [Field Type](#field-type)"},{"ref: refs/heads/master":"* [Change Log](#change-log)"},{"ref: refs/heads/master":"GitHub: https://github.com/Keyang/node-csvtojson"},{"ref: refs/heads/master":"##Installation"},{"ref: refs/heads/master":">npm install -g csvtojson"},{"ref: refs/heads/master":"##Features"},{"ref: refs/heads/master":"* Powerful library for you nodejs applications processing csv data."},{"ref: refs/heads/master":"* Extremly straight forward"},{"ref: refs/heads/master":"* Multiple input support: CSV File"},{"ref: refs/heads/master":"* Highly extendible with your own rules and parsers for outputs."},{"ref: refs/heads/master":"* Multiple interfaces (webservice"},{"ref: refs/heads/master":"##Usage"},{"ref: refs/heads/master":"###Command Line Tools"},{"ref: refs/heads/master":">csvtojson <csv file path>"},{"ref: refs/heads/master":"Example"},{"ref: refs/heads/master":">csvtojson ./myCSVFile"},{"ref: refs/heads/master":"Or use pipe:"},{"ref: refs/heads/master":">cat myCSVFile | csvtojson"},{"ref: refs/heads/master":"To start a webserver"},{"ref: refs/heads/master":">csvtojson startserver [options]"},{"ref: refs/heads/master":"Advanced usage with parameters support"},{"ref: refs/heads/master":">csvtojson --help"},{"ref: refs/heads/master":"### WebService"},{"ref: refs/heads/master":"After webserve being initialised"},{"ref: refs/heads/master":"For example"},{"ref: refs/heads/master":">csvtojson startserver"},{"ref: refs/heads/master":"And then we use curl to perform a web request:"},{"ref: refs/heads/master":"curl -X POST -d \"date,\\*json\\*employee.name,\\*json\\*employee.age,\\*json\\*employee.number,\\*array\\*address,\\*array\\*address,\\*jsonarray\\*employee.key,\\*jsonarray\\*employee.key,\\*omit\\*id\n>\n>2012-02-12,Eric,31,51234,Dunno Street,Kilkeny Road,key1,key2,2\n>\n>2012-03-06,Ted,28,51289,Cambridge Road,Tormore,key3,key4,4\" http://127.0.0.1:8801/parseCS"},{"ref: refs/heads/master":"#Demo Product"},{"ref: refs/heads/master":"To write a demo app"},{"ref: refs/heads/master":"```js"},{"ref: refs/heads/master":"var server=require(\"csvtojson\").interfaces.web;"},{"ref: refs/heads/master":"server.startWebServer({"},{"ref: refs/heads/master":"\"port\":8801"},{"ref: refs/heads/master":"});"},{"ref: refs/heads/master":"```"},{"ref: refs/heads/master":"Then run the app:"},{"ref: refs/heads/master":"```"},{"ref: refs/heads/master":"node ./index.js"},{"ref: refs/heads/master":"```"},{"ref: refs/heads/master":"Now you can post any csv data to http://localhost:8801/parseCSV"},{"ref: refs/heads/master":"It uses HTTP Request as readable stream and HTTP Response as writable stream."},{"ref: refs/heads/master":"# Quick Start"},{"ref: refs/heads/master":"Use csvtojson library to your own project."},{"ref: refs/heads/master":"Import csvtojson to your package.json or install through npm:"},{"ref: refs/heads/master":">npm install csvtojson"},{"ref: refs/heads/master":"~~The core of the tool is Converter class. It is based on node-csv library (version 0.3.6). Therefore it has all features of [node-csv](http://www.adaltas.com/projects/node-csv/).~~ To start a parse"},{"ref: refs/heads/master":"```js"},{"ref: refs/heads/master":"//Converter Class"},{"ref: refs/heads/master":"var Converter=require(\"csvtojson\").core.Converter;"},{"ref: refs/heads/master":"var fs=require(\"fs\");"},{"ref: refs/heads/master":"var csvFileName=\"./myCSVFile\";"},{"ref: refs/heads/master":"var fileStream=fs.createReadStream(csvFileName);"},{"ref: refs/heads/master":"//new converter instance"},{"ref: refs/heads/master":"var param={};"},{"ref: refs/heads/master":"var csvConverter=new Converter(param);"},{"ref: refs/heads/master":"//end_parsed will be emitted once parsing finished"},{"ref: refs/heads/master":"csvConverter.on(\"end_parsed\""},{"ref: refs/heads/master":"console.log(jsonObj); //here is your result json object"},{"ref: refs/heads/master":"});"},{"ref: refs/heads/master":"//read from file"},{"ref: refs/heads/master":"fileStream.pipe(csvConverter);"},{"ref: refs/heads/master":"```"},{"ref: refs/heads/master":"# Params"},{"ref: refs/heads/master":"The parameters for Converter constructor are:"},{"ref: refs/heads/master":"* constructResult: true/false. Whether to constrcut final json object in memory which will be populated in \"end_parsed\" event. Set to false if deal with huge csv data. default: true."},{"ref: refs/heads/master":"delimiter: delimiter used for seperating columns. default: \","}]